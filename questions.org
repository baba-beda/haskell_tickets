* Вопросы по темам 
** [5/5]Question 1: Intro
*** DONE Перечислите основные парадигмы ФП и Haskell, отличительные особенности
1. FP: 
   1. Иммутабельность
   2. Чистота
   3. Статическая типизация и вывод типов
   4. Функции высшего порядка
2. Haskell:
   1. Ленивые вычисления
   2. Pattern matching
   3. Type classes
*** DONE Укажите преимущества чистоты
1. Есть referential transparency \Rightarrow есть бОльшие возможности для оптимизации
2. Проще делить программу на независимые модули и отлаживать их по отдельности (\approx один модуль - одна функция) 
3. Чистые фукнции проще объединять в композиции, так как между ними нет неявных связей в виде изменяемого состояния
4. Чисто функциональные программы проще сделать параллельными
*** DONE Укажите преимущества ленивых вычислений
1. Можно присваивать значения в любом порядке, так как при ленивых вычислениях вычисление значения произойдет только при его использовании
2. Можно использовать бесконечные структуры данных
3. Ленивый язык более выразительный, чем строгий
4. Иногда можно улучшить эффективность использования памяти при ленивых вычислениях.
*** DONE Укажите преимущества иммутабельности
1. Нет проблемы нелокальности: изменение по одной ссылке не приведет к изменениям по остальным ссылкам, так как "изменяющая" функция вернет новый объект
2. Нет необходимости в копировании объектов
3. Инварианты достаточно проверять только при создании объекта
4. Нет зависимости от истории \Rightarrow нет зависимости от порядка вызова методов
5. Безопасное хранение объекта в коллекции
6. Не требуется синхронизация, так как все потоки только читают данные
*** DONE Укажите преимущества статической типизации
1. Раннее обнаружение ошибок :: Ошибки находятся на этапе компиляции, а не выполнения. Часто программа на SML или Haskell работает правильно, как только ее наконец удается скомпилировать
2. Высокая поддерживаемость больших проектов :: Изменения могут быть верифицированы компилятором, и типы являются частью документации программы, облегчая ее понимание
3. Автоматизированная обработка программ :: Например, автоматический рефакторинг, как в средах IDEA или Eclipse
4. Оптимизация кода :: Код, написанный на статически типизированном языке, проще оптимизировать, так что в среднем статически типизированный язык эффективнее динамически типизированных
** [13/16]Question 2: Basic Syntax
*** TODO Имеется класс типов: ~class C a where maxInt :: Int~. Реализуйте данный класс типов для какого-нибудь типа данных.
*** TODO Имеется класс типов: ~class C a where intGetter :: a -> Int~. Реализуйте данный класс типов для какого-нибудь типа данных.
*** TODO Как обновить ~f~ в ~data A = A { f :: Int -> Int }; c = A { b = (+1) }~?
*** DONE Что дает слово "*deriving*"? Что это в языке Haskell? 
~deriving~ позволяет неявно определять функции стандартных ~typeclass~'ов. Детали такой неявной реализации иногда зависят от компилятора. 
*** DONE Напишите реализацию ~foldr~ и ~foldl~. И нарисуйте картинку вычисления
~foldr~:
[[./images/foldr.png]]
#+BEGIN_SRC haskell
foldr :: (a -> b -> b) -> b -> [a] -> b
foldr _ z []     = z
foldr f z (x:xs) = x `f` (foldr f z xs)
#+END_SRC
~foldl~:
[[./images/foldl.png]]
#+BEGIN_SRC haskell
foldl :: (b -> a -> b) -> b -> [a] -> b
foldl _ z []     = z
foldl f z (x:xs) = foldl (f z x) xs
#+END_SRC
*** DONE Синтаксическим сахаром для какого кода является объявление следующего типа данных: ~data MyData = A { f :: Int, g :: Int -> Double }~
#+BEGIN_SRC haskell
data MyData = A Int (Int -> Double) 
#+END_SRC
*** DONE Напишите тип выражения ~flip id~.
#+BEGIN_SRC haskell
id :: a -> a
flip :: (a -> b -> c) -> b -> a -> c
-- a ≡ b -> c
flip id :: b -> (b -> c) -> c
#+END_SRC
*** DONE Напишите тип выражения ~((+) . )~
#+BEGIN_SRC haskell
(+) :: Num n => n -> n -> n
(.) :: (b -> c) -> (a -> b) -> a -> c
-- b ≡ n; c ≡ n -> n
((+) . ) :: (a -> n) -> a -> n -> n
#+END_SRC
*** DONE Напишите тип выражения ~(.) . (.)~
#+BEGIN_SRC haskell
-- left arg
(.) :: (b1 -> c1) -> (a1 -> b1) -> a1 -> c1
-- right arg 
(.) :: (b2 -> c2) -> (a2 -> b2) -> a2 -> c2
-- b ≡ b1 -> c1 ≡ ((a2 -> b2) -> (a2 -> c2)); c ≡ (a1 -> b1) -> (a1 -> c1)
-- a ≡ b2 -> c2 
((.) . (.)) :: (b2 -> c2) -> (a1 -> a2 -> b2) -> (a1 -> a2 -> c2)
#+END_SRC
*** DONE Имеется тип данных ~data A a = B { f :: Double }~. Укажите тип ~f~.    
#+BEGIN_SRC haskell
f :: A a -> Double
#+END_SRC
*** DONE В чем отличие ~data~ от ~newtype~?
~newtype~ гарантирует, что данные будут иметь такой же вид в рантайме, как и завернутый тип. То есть Конструктор для ~newtype~ гарантированно стирается во время компиляции.
~data~ объявляет абсолютно новую структуру данных в рантайме.
*** DONE Что такое "*Currying* (каррирование)" и *функции высшего порядка*?
*Каррирование* Вычисление функции, принимающей несколько аргументов, через несколько функций, принимающих один аргумент. 
Например, для функции 2-х аргументов h:(A \times B) \to C оператор каррирования \Lambda выполняет преобразование \Lambda(h):A \to (B \to C). То есть \Lambda: ((A \times B) \to C) \to (A \to (B \to C)).
#+BEGIN_SRC haskell
curry :: ((a, b) -> c) -> a -> b -> c
uncurry :: (a -> b -> c) -> (a, b) -> c
#+END_SRC
*Функции высшего порядка* Функции, принимающие в качестве аргументов другие функции или возвращающие другие функции в качестве результата. 
#+BEGIN_SRC haskell
map :: (a -> b) -> [a] -> [b]
filter :: (a -> Bool) -> [a] -> [a]
foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
foldl :: Foldable t => (b -> a -> b) -> b -> t a -> b
#+END_SRC
*** DONE Напишите, что такое DatatypeContexts? Приведите пример (не из презентации)
Ограничения на параметры в объявлениях ~data~ и ~newtype~. Объявленные таким образом типы требуют выполнения ограничений при создании (/construction/) и деконструкции (/deconstruction/, \approx разбиение конструктора при паттерн-матчинге), даже если эти ограничения неиспользуются. (deprecated in Haskell 7.2)
#+BEGIN_SRC haskell
data Eq a => Foo a = Constr a

-- не можем написать функцию:
isEq :: Foo a -> Foo a -> Bool
-- должны написать:
isEq :: Eq a => Foo a -> Foo a -> Bool
isRa (Constr x) (Constr y) = x == y

-- не сработает:
getVal :: Foo a -> a
-- сработает:
getVal :: Eq a => Foo a -> a
getVal (Constr x) = x
#+END_SRC
*** DONE Напишите тип следующей функции в наиболее общем виде: ~f a = map (* a) . map (uncurry (+)) . map (\x -> (x, x))~
#+BEGIN_SRC haskell 
f :: Num a => a -> [a] -> [a]
#+END_SRC
*** DONE Напишите функцию с типом, которая принимает список пар чисел и оставляет только такие, что сумма чисел в паре четная.
#+BEGIN_SRC haskell
evenPairs :: (Integral a) :: [(a, a)] -> [(a, a)]
evenPairs = filter (even . uncurry (+))
#+END_SRC 
*** DONE Задан тип данных ~data Role a = A { name :: String, role :: a } | B { name :: String, roles :: [a] }~. Напишите конструкцию, синтаксическим сахаром для которой является данных Record Syntax.
#+BEGIN_SRC haskell
data Role a = A String a | B String [a]
#+END_SRC
** [8/10]Question 3: Kinds
*** DONE Приведите пример типа с kind'ом ~Constraint -> *~
#+BEGIN_SRC haskell
type P a = a => Int
#+END_SRC
*** TODO Приведите пример типа с kind'ом ~(* -> Constraint) -> Constraint~
*** DONE Приведите пример типа с kind'ом ~(* -> *) -> Constraint~
~Monad, Functor, Applicative~
*** DONE Приведите пример типа с kind'ом ~(* -> Constraint) -> *~
#+BEGIN_SRC haskell 
type P a = a Int => Int
#+END_SRC
*** DONE Приведите пример типа с kind'ом ~* -> Constraint~
~Num, Ord, Eq, Show~
*** DONE Укажите kind для ~Monad~
~(* -> *) -> Constraint~
*** TODO Укажите kind следующего типа данных: ~data A f g = B (f g) (g f)~
*** DONE Укажите kind следующего типа данных: ~data A f g = B (f g Int)~
~A :: (* -> * -> *) -> * -> *~
*** DONE Укажите kind типа ~type C p = p Int => Int~
~C :: (* -> Constraint) -> *~
*** DONE Укажите kind типа ~type C p = (p Int, p Double)~
~C :: (* -> *) -> *~
** [9/14]Question 4: Type hierarchy
*** DONE Чему равно значение ~length (Left "hello")~ и почему?
0
#+BEGIN_SRC haskell
length = foldr (\_ n -> 1 + n) 0
#+END_SRC 
*** DONE Чему равно значение ~length (Just [1..10])~ и почему?
1
*** DONE Напишите type class ~Traversable~
#+BEGIN_SRC haskell
class (Functor t, Foldable t) => Traversable t where
  traverse :: Applicative f => (a -> f b) -> t a -> f (t b)
  traverse f = sequenceA . fmap f
  sequenceA :: Applicative f => t (f a) -> f (t a)
  sequenceA = traverse id
  mapM :: Monad m => (a -> m b) -> t a -> m (t b)
  mapM = traverse
  sequence :: Monad m => t (m a) -> m (t a)
  sequence = sequenceA
#+END_SRC
*** TODO Напишите реализацию ~Traversable~ для списка
*** TODO Напишите реализацию ~Traversable~ для ~Maybe~ 
*** TODO Напишите реализацию ~Traversable~ для ~Either~
*** DONE Напишите реализацию ~Foldable~ для списка 
#+BEGIN_SRC haskell
instance Foldable [] where
    foldMap _ []     = mempty
    foldMap f (x:xs) = f x <> foldMap f xs
#+END_SRC
*** DONE Напишите реализацию ~Foldable~ для ~Maybe~
#+BEGIN_SRC haskell
instance Foldable Maybe where 
    foldr f zero Nothing = zero  
    foldr f zero (Just x) = f x zero 
#+END_SRC
*** DONE Напишите реализацию ~Foldable~ для ~Either~
#+BEGIN_SRC haskell
instance Foldable Either where 
    foldr f zero Left = zero  
    foldr f zero (Right x) = f x zero 
#+END_SRC

*** TODO Напишите, что делают эти расширения языка: ~TypeSynonyms, MultiParamTypeClasses, ViewPatterns, RecordsWildCards~
*** DONE Реализуйте ~traverse~ через ~sequence~.
#+BEGIN_SRC haskell
traverse :: Applicative f => (a -> f b) -> t a -> f (t b)
sequence :: Monad m => t (m a) -> m (t a)
traverse f = sequence . fmap f
#+END_SRC
*** TODO Реализуйте ~sequence~ через ~traverse~.
*** DONE Укажите *minimal complete definition* для type class'а ~Foldable~
    foldMap | foldr
*** DONE Укажите *minimal complete definition* для type class'а ~Traversable~
    traverse | sequenceA
** [4/5]Question 5: Functors
*** DONE Напишите законы *функтора*
#+BEGIN_SRC haskell
1. fmap id = id
2. fmap (f . g)   = (fmap f) . (fmap g)
   fmap (f . g) F = fmap f (fmap g F)
#+END_SRC
*** DONE Реализуйте функцию ~(<<$>>) :: (Functor f, Functor g) => (a -> b) -> f (g a) -> f (g b)~ 
#+BEGIN_SRC haskell
(<<$>>) f w = (fmap $ fmap f) w
#+END_SRC
*** DONE Напишите класс типов ~Bifunctor~ и реализуйте его для пары
#+BEGIN_SRC haskell
class Bifunctor p where
    bimap  :: (a -> b) -> (c -> d) -> p a c -> p b d
instance Bifunctor (,) where
    bimap f g (a, b) = (f a, g b)
#+END_SRC
*** DONE Напишите класс типов ~Bifunctor~ и реализуйте его для ~Either~
#+BEGIN_SRC haskell
instance Bifunctor Either where
    bimap f _ (Left a)  = Left  (f a)
    bimap _ g (Right b) = Right (g b)
#+END_SRC
*** TODO Реализуйте ~fmap~ через ~bind~
** [0/7]Question 6: Applicatives
*** TODO Напишите type class ~Applicative~ и его реализацию для ~((->) r)~
*** TODO Напишите type class ~Applicative~ и его реализацию для ~ZipList~
*** TODO Реализуйте функцию ~liftA3~
*** TODO Реализуйте функцию ~liftAA2 :: (Applicative f, Applicative g) => (a -> b -> c) -> f (g a) -> f (g b) -> f (g c)~
*** TODO Реализуйте функцию ~(<<*>>) :: (Applicative f, Applicative g) => f (g (a -> b)) -> f (g a) -> f (g b)~
*** TODO Реализуйте функцию ~eitherA :: (Alternative f) => f a -> f b -> f (Either a b)~
*** TODO Есть функция ~g :: a -> b~ и объект ~x :: Applicative f => f a~. Напишите два разных способа получить объект ~y :: Applicative f => f b~ из ~x~ с использованием ~g~.
** [5/16]Question 7: Monads
*** DONE Что такое монада?
Монады применяют функции, которые возвращают завернутые значения, к завернутому знаению.
#+BEGIN_SRC haskell
class Monad m where   -- m :: * -> *
    return :: a -> m a                  -- return
    (>>=)  :: m a -> (a -> m b) -> m b  -- bind
    (>>)   :: m a -> m b -> m b         -- then
    m >> k = m >>= \_ -> k
(=<<) :: Monad m => (a -> m b) -> m a -> m b
f =<< x = x >>= f
infixl 1  >>, >>=
infixr 1  =<<
#+END_SRC 
*** DONE Напишите не меньше пяти типов данных, являющихся монадой
1. []
2. Maybe
3. Either
4. IO
5. State
6. Identity
7. Writer
8. Reader
9. RWS
10. Cont
*** DONE Напишите не менее семи функций, полезных при работе с монадами
1. return
2. >>=
3. =<<
4. >>
5. liftM
6. liftM2
7. >=>
8. <=<
9. join
10. ifM
11. (||^)
*** TODO Отличие ~unsafePerformIO~ от ~unsafeInterleaveIO~?
*** TODO Напишите тип функции ~join~ и приведите несколько примеров использования
*** TODO Реализуйте ~join~ через ~bind~.
*** TODO Напишите реализацию ~Monad~ для списка
*** DONE Напишите реализацию ~Monad~ для ~Maybe~
#+BEGIN_SRC haskell
data Maybe a = Nothing | Just a

instance Monad Maybe where
    return = Just
    Nothing >>= _ = Nothing
    Just a  >>= f = f a
#+END_SRC 
*** TODO Напишите реализацию ~Monad~ для ~Either~
*** TODO Напишите определение типа данных ~Writer~ и его ~instance Monad~
*** TODO Напишите определение типа данных ~Reader~ и его ~instance Monad~
*** TODO Напишите определение типа данных ~State~ и его ~instance Monad~
*** TODO Напишите определение типа данных ~Cont~ и его ~instance Monad~
*** TODO Что такое ~IO~? Как теоретически это реализовано? 
*** TODO Покажите, синтаксическим сахаром для чего является ~do~-нотация (включая ~let~).
*** DONE Напишите тип ~(>=>)~ и смысл этого оператора.
#+BEGIN_SRC haskell
(>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c
#+END_SRC
композиция монад?
** [0/7]Question 8: Trans
*** TODO Напишите класс типов ~MonadTrans~ и реализуйте его для ~StateT~
*** TODO Напишите класс типов ~MonadTrans~ и реализуйте его для ~WriterT~
*** TODO Напишите класс типов ~MonadTrans~ и реализуйте его для ~MaybeT~
*** TODO Напишите класс типов ~MonadTrans~ и реализуйте его для ~ReaderT~
*** TODO Напишите тип ~StateT~ и то, как определен ~State~ через ~StateT~
*** TODO Напишите тип ~MaybeT~ и реализуйте его инстанс ~Monad~
*** TODO Нарисуйте табличку отличий обычных типов и их трансформеров для известных вам трансформеров
** [0/10]Question 9: Strict Lazy
*** TODO Что такое *irrefutable patterns* и зачем они нужны?
*** TODO Что такое *Stream Fusion* и зачем он нужен?
*** TODO Напишите, что значит тип ~ST~ и напишите основные функции по работе с ним
*** TODO Что такое ~BangPatterns~? Когда их нужно использовать? 
*** TODO Укажите, что делает ~deepseq~ и как.
*** TODO В чем разница между ~seq~ и ~deepseq~?
*** TODO В чем разница между ~seq~ и ~BangPatterns~?
*** TODO Что такое ~STRef~ и в чем отличие от ~IORef~?
*** TODO Что такое *Deforestation*?
*** TODO Чем плохо использовать ~IORef~ и ~IOArray~? Зачем нужны ~STRef~ и ~STArray~?
** [0/4]Question 10: TemplateHaskell
*** TODO Как можно посмотреть *AST-дерево* для выражения в Haskell?
*** TODO Напишите не меньше трех применений *TemplateHaskell*
*** TODO Что такое ~Q~ в типах функций Template Haskell?
*** TODO В чем разница между ~[| |]~ и ~$()~?
** [3/10]Question 11: Lenses
*** TODO Что такое изоморфизм (~Iso~)?
*** TODO Чем линзы отличаются от призм?
*** DONE Напишите тип ~Iso~
#+BEGIN_SRC haskell
type Iso s t a b = forall p f. (Profunctor p, Functor f) => p a (f b) -> p s (f t)
#+END_SRC 
*** DONE Напишите тип функции ~from~ для ~Iso~
#+BEGIN_SRC haskell
from :: AnIso s t a b -> Iso b a t s
#+END_SRC
*** DONE Напишите тип функции ~iso~
#+BEGIN_SRC haskell
iso :: (s -> a) -> (b -> t) -> Iso s t a b
#+END_SRC
*** TODO Напишите реализацию ~over~
*** TODO Реализуйте ~set~ через ~over~
*** TODO Реализуйте ~over~ через ~view~ и ~set~. 
*** TODO Напишите функцию ~lens~, которая принимает геттер и сеттер и возвращает линзу
*** TODO Укажите операторные обозначений функций ~view~, ~set~, ~over~. Есть ли отличие в типах функций и их операторных выражений?
** [0/8]Question 12: Threads
*** TODO Что такое ~STM~ (коротко), что позволяет делать и какие есть функции по работе с ним?
*** TODO В чем отличие Haskell потоков от, например, потоков в Java?
*** TODO Что такое ~Strategy~? Перечислите несколько стратегий и реализуйте некоторые. Зачем они нужны?
*** TODO Как в Haskell обстоят дела с *DeadLock*'ами?
*** TODO Что такое *RTS*?
*** TODO Укажите несколько полезных опций *RTS*
*** TODO Опишите, что такое ~MVar~, зачем он может быть нужен и несколько функций по работе с этим объектом.
*** TODO Что делает ~forkIO~? Чем он отличается от ~forkFinally~?
** [5/5]Question 13: forall
*** DONE Напишите, как иметь список объектов разных функторов, внутри каждого из которых значения одинакового типа, чтобы иметь возможность применить функции из этого значения в другое?
#+BEGIN_SRC haskell
data FunctorBox a = forall f . Functor f => FB (f a)
FB :: forall {a} {f :: * -> *} . Functor f => f a -> FunctorBox a -- as ghci sees it

fmapFB :: forall t a . (t -> a) -> FunctorBox t -> FunctorBox a
fmapFB f = \(FB a) -> FB (f <$> a)
#+END_SRC
*** DONE Зачем нужно расширение ~ExistentialQuantification~?
Для того, чтобы работать со значениями разных типов, но обладающими каким-то свойством (например, они одного класса), одинаково. Например, чтобы иметь возможность складывать такие значения в лист, получая тем самым гетерогенный лист, спрятав значения в некоторую "коробку" (/type hider/)
*** DONE Зачем нужно расширение языка ~-XExplicitForall~?
Чтобы явно аннотировать типы с использованием ~forall~
*** DONE В чем разница между ~-XRank2Types~ и ~-XRankNTypes~? Зачем нужны оба?
~-XRank2Types~ разрешает полиморфные типы ранга 2, ~-XRankNTypes~ разрешает полиморфные типы любого ранга. 
В системах с полиморфными типами ранга 2 задача вывода типов разрешима, если же ранг > 2, то задача становится неразрешимо и возникает необходимость явной аннотации типов. С этим и связана необходимость разделения этих расширений языка.
*** DONE Зачем нужно расширение языка ~-XScopedTypeVariables~ и как оно взаимодействует с ~forall~?
Позволяет указывать, что переменные типа из сигнатуры распространяются на тело функции. Чтобы это работало, надо использовать ~forall~ в сигнатуре:
#+BEGIN_SRC haskell
  {-# LANGUAGE ScopedTypeVariables #-}
  import Data.List

  main = putStrLn "No errors."

  -- show
  myFunction :: forall a. Ord a => [a] -> [(a, a)]
  myFunction inputList = zip sortedList nubbedList
      where sortedList :: [a]
            sortedList = sort inputList
            nubbedList :: [a]
            nubbedList = nub inputList
  -- /show
#+END_SRC
** [4/5]Question 14: Advanced types
*** DONE Что такое *typed holes* и зачем они нужны?
С их помощью можно спросить у компилятора, какого типа должно быть твое что-то.
#+BEGIN_SRC haskell
  mfold :: [Maybe a] -> [Either a b]
  mfold = foldr _f _z

  > Found hole ‘_f’ with type: Maybe a -> [Either a b] -> [Either a b]
  > Found hole ‘_z’ with type: [Either a b]
#+END_SRC
*** DONE Зачем нужно расширение языка ~-XTypeApplications~?
Позволяет задавать явные аргументы типов полиморфной функции, например ~map @Int @Bool isEven xs~. Решает проблему show/read, потому что мы явно задаем типы и все тайпчекается.
#+BEGIN_SRC haskell
  answer_read = show (read @Int "3") -- "3" :: String
  answer_show = show @Integer (read "5") -- "5" :: String
  answer_showread = show @Int (read @Int "7") -- "7" :: String
#+END_SRC
*** DONE Зачем нужно расширение языка ~-XPartialSignatures~?
Аналог typed holes для сигнатур функций:
#+BEGIN_SRC haskell
  arbitCs :: _ => a -> String
  arbitCs x = show (succ x) ++ show (x == x)
  Main.hs:6:12: warning: [-Wpartial-type-signatures]
      Found constraint wildcard ‘_’ standing for ‘(Show a, Eq a, Enum a)’
      In the type signature:
        arbitCs :: _ => a -> String
#+END_SRC
*** TODO Можно ли создать следующий тип данных в Haskell: ~data a : > b = (a -> b) : > (b -> a)~?
*** DONE Что такое *Functional Dependencies*? Назовите какой-нибудь известный вам type class, в котором присутствуют функциональные зависимости.
Функциональные зависимости используются для ограничения параметров тайпклассов. Они позволяют объявить, что в тайпклассе с несколькими параметрами один из параметров можно *однозначно!* определить по другим.
#+BEGIN_SRC haskell
class Mult a b c | a b -> c where
  (*) :: a -> b -> c
#+END_SRC
Классический (и единственный) пример использования - перемножение матриц/векторов/скаляров, тайпкласс указан выше.
** [0/11]Question 15: Comonads
*** TODO Напишите пример использования *комонад* 
*** TODO Напишите, какие комонады двойственны монадам ~Reader, Writer, State~
*** TODO Напишите, какие комонады двойственны монадам ~Traced, Store, Env~
*** TODO Напишите комонаду ~Stream~ и инстанс ~Comonad~ для нее.
*** TODO Напишите комонаду ~Env~ и инстанс ~Comonad~ для нее.
*** TODO Напишите комонаду ~Store~ и инстанс ~Comonad~ для нее.
*** TODO Напишите комонаду ~Traced~ и инстанс ~Comonad~ для нее.
*** TODO Реализуйте ~instance Comonad~ для обычного ~Zipper~
*** TODO ~IO~ использует абстракцию монад, какой аналог есть в мире комонад?
*** TODO Напишите класс ~ComonadTrans~
*** TODO Как можно было бы сделать ~codo~ нотацию для комонад? И что бы происходило в этом синтаксическом сахаре?
** [0/8]Question 16: Idris
*** TODO Реализуйте функцию ~take~ для вектора на Idris
*** TODO Реализуйте функцию ~filter~ для вектора на Idris
*** TODO Реализуйте функцию ~head~ для списка на Idris, которая компилируется только с гарантированно непустыми списками.
*** TODO Напишите тип "*зависимая пара*" на Idris
*** TODO Что такое ~[| |]~-идиома в Idris?
*** TODO Что такое ~!~-идиома в Idris?
*** TODO Что такое ~_|_-eliminator~? Зачем это надо?
*** TODO Что такое "*тотальность*" и какие преимущества она дает? 
