* Вопросы по темам 
** Question 1: Intro
*** DONE Перечислите основные парадигмы ФП и Haskell, отличительные особенности
1. FP: 
   1. Иммутабельность
   2. Чистота
   3. Статическая типизация и вывод типов
   4. Функции высшего порядка
2. Haskell:
   1. Ленивые вычисления
   2. Pattern matching
   3. Type classes
*** DONE Укажите преимущества чистоты
1. Есть referential transparency \Rightarrow есть бОльшие возможности для оптимизации
2. Проще делить программу на независимые модули и отлаживать их по отдельности (\approx один модуль - одна функция) 
3. Чистые фукнции проще объединять в композиции, так как между ними нет неявных связей в виде изменяемого состояния
4. Чисто функциональные программы проще сделать паралgit@github.com:baba-beda/haskell_tickets.gitлельными
*** DONE Укажите преимущества ленивых вычислений
1. Можно присваивать значения в любом порядке, так как при ленивых вычислениях вычисление значения произойдет только при его использовании
2. Можно использовать бесконечные структуры данных
3. Ленивый язык более выразительный, чем строгий
4. Иногда можно улучшить эффективность использования памяти при ленивых вычислениях.
*** DONE Укажите преимущества иммутабельности
1. Нет проблемы нелокальности: изменение по одной ссылке не приведет к изменениям по остальным ссылкам, так как "изменяющая" функция вернет новый объект
2. Нет необходимости в копировании объектов
3. Инварианты достаточно проверять только при создании объекта
4. Нет зависимости от истории \Rightarrow нет зависимости от порядка вызова методов
5. Безопасное хранение объекта в коллекции
6. Не требуется синхронизация, так как все потоки только читают данные
*** DONE Укажите преимущества статической типизации
1. Раннее обнаружение ошибок :: Ошибки находятся на этапе компиляции, а не выполнения. Часто программа на SML или Haskell работает правильно, как только ее наконец удается скомпилировать
2. Высокая поддерживаемость больших проектов :: Изменения могут быть верифицированы компилятором, и типы являются частью документации программы, облегчая ее понимание
3. Автоматизированная обработка программ :: Например, автоматический рефакторинг, как в средах IDEA или Eclipse
4. Оптимизация кода :: Код, написанный на статически типизированном языке, проще оптимизировать, так что в среднем статически типизированный язык эффективнее динамически типизированных
** Question 2: Basic Syntax
*** TODO Имеется класс типов: ~class C a where maxInt :: Int~. Реализуйте данный класс типов для какого-нибудь типа данных.
*** TODO Имеется класс типов: ~class C a where intGetter :: a -> Int~. Реализуйте данный класс типов для какого-нибудь типа данных.
*** TODO Как обновить ~f~ в ~data A = A { f :: Int -> Int }; c = A { b = (+1) }~?
*** DONE Что дает слово "*deriving*"? Что это в языке Haskell? 
~deriving~ позволяет неявно определять функции стандартных ~typeclass~'ов. Детали такой неявной реализации иногда зависят от компилятора. 
*** DONE Напишите реализацию ~foldr~ и ~foldl~. И нарисуйте картинку вычисления
~foldr~:
[[./images/foldr.png]]
#+BEGIN_SRC haskell
foldr :: (a -> b -> b) -> b -> [a] -> b
foldr _ z []     = z
foldr f z (x:xs) = x `f` (foldr f z xs)
#+END_SRC
~foldl~:
[[./images/foldl.png]]
#+BEGIN_SRC haskell
foldl :: (b -> a -> b) -> b -> [a] -> b
foldl _ z []     = z
foldl f z (x:xs) = foldl (f z x) xs
#+END_SRC
*** DONE Синтаксическим сахаром для какого кода является объявление следующего типа данных: ~data MyData = A { f :: Int, g :: Int -> Double }~
#+BEGIN_SRC haskell
data MyData = A Int (Int -> Double) 
#+END_SRC
*** DONE Напишите тип выражения ~flip id~.
#+BEGIN_SRC haskell
id :: a -> a
flip :: (a -> b -> c) -> b -> a -> c
-- a ≡ b -> c
flip id :: b -> (b -> c) -> c
#+END_SRC
*** DONE Напишите тип выражения ~((+) . )~
#+BEGIN_SRC haskell
(+) :: Num n => n -> n -> n
(.) :: (b -> c) -> (a -> b) -> a -> c
-- b ≡ n; c ≡ n -> n
((+) . ) :: (a -> n) -> a -> n -> n
#+END_SRC
*** DONE Напишите тип выражения ~(.) . (.)~
#+BEGIN_SRC haskell
-- left arg
(.) :: (b1 -> c1) -> (a1 -> b1) -> a1 -> c1
-- right arg 
(.) :: (b2 -> c2) -> (a2 -> b2) -> a2 -> c2
-- b ≡ b1 -> c1 ≡ ((a2 -> b2) -> (a2 -> c2)); c ≡ (a1 -> b1) -> (a1 -> c1)
-- a ≡ b2 -> c2 
((.) . (.)) :: (b2 -> c2) -> (a1 -> a2 -> b2) -> (a1 -> a2 -> c2)
#+END_SRC
*** DONE Имеется тип данных ~data A a = B { f :: Double }~. Укажите тип ~f~.    
#+BEGIN_SRC haskell
f :: A a -> Double
#+END_SRC
*** DONE В чем отличие ~data~ от ~newtype~?
~newtype~ гарантирует, что данные будут иметь такой же вид в рантайме, как и завернутый тип. То есть Конструктор для ~newtype~ гарантированно стирается во время компиляции.
~data~ объявляет абсолютно новую структуру данных в рантайме.
*** DONE Что такое "*Currying* (каррирование)" и *функции высшего порядка*?
*Каррирование* Вычисление функции, принимающей несколько аргументов, через несколько функций, принимающих один аргумент. 
Например, для функции 2-х аргументов h:(A \times B) \to C оператор каррирования \Lambda выполняет преобразование \Lambda(h):A \to (B \to C). То есть \Lambda: ((A \times B) \to C) \to (A \to (B \to C)).
#+BEGIN_SRC haskell
curry :: ((a, b) -> c) -> a -> b -> c
uncurry :: (a -> b -> c) -> (a, b) -> c
#+END_SRC
*Функции высшего порядка* Функции, принимающие в качестве аргументов другие функции или возвращающие другие функции в качестве результата. 
#+BEGIN_SRC haskell
map :: (a -> b) -> [a] -> [b]
filter :: (a -> Bool) -> [a] -> [a]
foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
foldl :: Foldable t => (b -> a -> b) -> b -> t a -> b
#+END_SRC
*** DONE Напишите, что такое DatatypeContexts? Приведите пример (не из презентации)
Ограничения на параметры в объявлениях ~data~ и ~newtype~. Объявленные таким образом типы требуют выполнения ограничений при создании (/construction/) и деконструкции (/deconstruction/, \approx разбиение конструктора при паттерн-матчинге), даже если эти ограничения неиспользуются. (deprecated in Haskell 7.2)
#+BEGIN_SRC haskell
data Eq a => Foo a = Constr a

-- не можем написать функцию:
isEq :: Foo a -> Foo a -> Bool
-- должны написать:
isEq :: Eq a => Foo a -> Foo a -> Bool
isRa (Constr x) (Constr y) = x == y

-- не сработает:
getVal :: Foo a -> a
-- сработает:
getVal :: Eq a => Foo a -> a
getVal (Constr x) = x
#+END_SRC
*** DONE Напишите тип следующей функции в наиболее общем виде: ~f a = map (* a) . map (uncurry (+)) . map (\x -> (x, x))~
#+BEGIN_SRC haskell 
f :: Num a => a -> [a] -> [a]
#+END_SRC
*** DONE Напишите функцию с типом, которая принимает список пар чисел и оставляет только такие, что сумма чисел в паре четная.
#+BEGIN_SRC haskell
evenPairs :: (Integral a) :: [(a, a)] -> [(a, a)]
evenPairs = filter (even . uncurry (+))
#+END_SRC 
*** DONE Задан тип данных ~data Role a = A { name :: String, role :: a } | B { name :: String, roles :: [a] }~. Напишите конструкцию, синтаксическим сахаром для которой является данных Record Syntax.
#+BEGIN_SRC haskell
data Role a = A String a | B String [a]
#+END_SRC
** Question 3: Kinds
*** TODO Приведите пример типа с kind'ом ~Constraint -> *~
#+BEGIN_SRC haskell
type P a = a => Int
#+END_SRC
*** TODO Приведите пример типа с kind'ом ~(* -> Constraint) -> Constraint~
*** DONE Приведите пример типа с kind'ом ~(* -> *) -> Constraint~
~Monad, Functor, Applicative~
*** TODO Приведите пример типа с kind'ом ~(* -> Constraint) -> *~
#+BEGIN_SRC haskell 
type P a = a Int => Int
#+END_SRC
*** DONE Приведите пример типа с kind'ом ~* -> Constraint~
~Num, Ord, Eq, Show~
*** DONE Укажите kind для ~Monad~
~(* -> *) -> Constraint~
*** TODO Укажите kind следующего типа данных: ~data A f g = B (f g) (g f)~
*** DONE Укажите kind следующего типа данных: ~data A f g = B (f g Int)~
~A :: (* -> * -> *) -> * -> *~
*** TODO Укажите kind типа ~type C p = p Int => Int~
*** DONE Укажите kind типа ~type C p = (p Int, p Double)~
~C :: (* -> *) -> *~
** Question 4: Type hierarchy
*** Чему равно значение ~length (Left "hello")~ и почему?
*** Чему равно значение ~length (Just [1..10])~ и почему?
*** Напишите type class ~Traversable~
*** Напишите реализацию ~Traversable~ для списка
*** Напишите реализацию ~Traversable~ для ~Maybe~ 
*** Напишите реализацию ~Traversable~ для ~Either~
*** Напишите реализацию ~Foldable~ для списка 
*** Напишите реализацию ~Foldable~ для ~Maybe~
*** Напишите реализацию ~Foldable~ для ~Either~
*** Напишите, что делают эти расширения языка: ~TypeSynonyms, MultiParamTypeClasses, ViewPatterns, RecordsWildCards~
*** Реализуйте ~traverse~ через ~sequence~.
*** Реализуйте ~sequence~ через ~traverse~.
*** Укажите *minimal complete definition* для type class'а ~Foldable~
*** Укажите *minimal complete definition* для type class'а ~Traversable~
** Question 5: Functors
*** Напишите законы *функтора*
*** Реализуйте функцию ~(<<$>>) :: (Functor f, Functor g) => (a -> b) -> f (g a) -> f (g b)~ 
*** Напишите класс типов ~Bifunctor~ и реализуйте его для пары
*** Напишите класс типов ~Bifunctor~ и реализуйте его для ~Either~
*** Реализуйте ~fmap~ через ~bind~
** Question 6: Applicatives
*** Напишите type class ~Applicative~ и его реализацию для ~((->) r)~
*** Напишите type class ~Applicative~ и его реализацию для ~ZipList~
*** Реализуйте функцию ~liftA3~
*** Реализуйте функцию ~liftAA2 :: (Applicative f, Applicative g) => (a -> b -> c) -> f (g a) -> f (g b) -> f (g c)~
*** Реализуйте функцию ~(<<*>>) :: (Applicative f, Applicative g) => f (g (a -> b)) -> f (g a) -> f (g b)~
*** Реализуйте функцию ~eitherA :: (Alternative f) => f a -> f b -> f (Either a b)~
*** Есть функция ~g :: a -> b~ и объект ~x :: Applicative f => f a~. Напишите два разных способа получить объект ~y :: Applicative f => f b~ из ~x~ с использованием ~g~.
** Question 7: Monads
*** Что такое монада?
Монады применяют функции, которые возвращают завернутые значения, к завернутому знаению.
#+BEGIN_SRC haskell
class Monad m where   -- m :: * -> *
    return :: a -> m a                  -- return
    (>>=)  :: m a -> (a -> m b) -> m b  -- bind
    (>>)   :: m a -> m b -> m b         -- then
    m >> k = m >>= \_ -> k
(=<<) :: Monad m => (a -> m b) -> m a -> m b
f =<< x = x >>= f
infixl 1  >>, >>=
infixr 1  =<<
#+END_SRC 
*** Напишите не меньше пяти типов данных, являющихся монадой
1. []
2. Maybe
3. Either
4. IO
5. State
6. Identity
7. Writer
8. Reader
9. RWS
10. Cont
*** Напишите не менее семи функций, полезных при работе с монадами
1. return
2. >>=
3. =<<
4. >>
5. liftM
6. liftM2
7. >=>
8. <=<
9. join
10. ifM
11. (||^)
*** Отличие ~unsafePerformIO~ от ~unsafeInterleaveIO~?
*** Напишите тип функции ~join~ и приведите несколько примеров использования
*** Реализуйте ~join~ через ~bind~.
*** Напишите реализацию ~Monad~ для списка
*** Напишите реализацию ~Monad~ для ~Maybe~
#+BEGIN_SRC haskell
data Maybe a = Nothing | Just a

instance Monad Maybe where
    return = Just
    Nothing >>= _ = Nothing
    Just a  >>= f = f a
#+END_SRC 
*** Напишите реализацию ~Monad~ для ~Either~
*** Напишите определение типа данных ~Writer~ и его ~instance Monad~
*** Напишите определение типа данных ~Reader~ и его ~instance Monad~
*** Напишите определение типа данных ~State~ и его ~instance Monad~
*** Напишите определение типа данных ~Cont~ и его ~instance Monad~
*** Что такое ~IO~? Как теоретически это реализовано? 
*** Покажите, синтаксическим сахаром для чего является ~do~-нотация (включая ~let~).
*** Напишите тип ~(>=>)~ и смысл этого оператора.
** Question 8: Trans
*** Напишите класс типов ~MonadTrans~ и реализуйте его для ~StateT~
*** Напишите класс типов ~MonadTrans~ и реализуйте его для ~WriterT~
*** Напишите класс типов ~MonadTrans~ и реализуйте его для ~MaybeT~
*** Напишите класс типов ~MonadTrans~ и реализуйте его для ~ReaderT~
*** Напишите тип ~StateT~ и то, как определен ~State~ через ~StateT~
*** Напишите тип ~MaybeT~ и реализуйте его инстанс ~Monad~
*** Нарисуйте табличку отличий обычных типов и их трансформеров для известных вам трансформеров
** Question 9: Strict Lazy
*** Что такое *irrefutable patterns* и зачем они нужны?
*** Что такое *Stream Fusion* и зачем он нужен?
*** Напишите, что значит тип ~ST~ и напишите основные функции по работе с ним
*** Что такое ~BangPatterns~? Когда их нужно использовать? 
*** Укажите, что делает ~deepseq~ и как.
*** В чем разница между ~seq~ и ~deepseq~?
*** В чем разница между ~seq~ и ~BangPatterns~?
*** Что такое ~STRef~ и в чем отличие от ~IORef~?
*** Что такое *Deforestation*?
*** Чем плохо использовать ~IORef~ и ~IOArray~? Зачем нужны ~STRef~ и ~STArray~?
** Question 10: TemplateHaskell
*** Как можно посмотреть *AST-дерево* для выражения в Haskell?
*** Напишите не меньше трех применений *TemplateHaskell*
*** Что такое ~Q~ в типах функций Template Haskell?
*** В чем разница между ~[| |]~ и ~$()~?
** Question 11: Lenses
*** Что такое изоморфизм (~Iso~)?
*** Чем линзы отличаются от призм?
*** Напишите тип ~Iso~
*** Напишите тип функции ~from~ для ~Iso~
*** Напишите тип функции ~iso~
*** Напишите реализацию ~over~
*** Реализуйте ~set~ через ~over~
*** Реализуйте ~over~ через ~view~ и ~set~. 
*** Напишите функцию ~lens~, которая принимает геттер и сеттер и возвращает линзу
*** Укажите операторные обозначений функций ~view~, ~set~, ~over~. Есть ли отличие в типах функций и их операторных выражений?
** Question 12: Threads
*** Что такое ~STM~ (коротко), что позволяет делать и какие есть функции по работе с ним?
Software Transactional Memory - абстракция для concurrent communication, хороша тем, что две concurrent абстракции можно легко слепить в одну и не придется светить деталями реализации; позволяет выполнить транзакцию (либо все операции успешно, либо откат). Функции ~newTVar/readTVar/writeTVar, atomically, retry, orElse~.
*** В чем отличие Haskell потоков от, например, потоков в Java?
Много хаскель-тредов могут быть замаплены на один ОС-тред, потому что в действительности этот ОС-тред всего лишь гоняет хаскель-рантайм. А рантайм сам разбирается со своим внутренним шедулингом, yield'ами и прочим. Это, кстати, уменьшает оверхед, который ось обычно тратит на context switching.
*** Что такое ~Strategy~? Перечислите несколько стратегий и реализуйте некоторые. Зачем они нужны?
Стратегии позволяют выразить паралельные вычисления, то есть:
- поддерживают deterministic parallelism: результат программы не зависит от параллельных вычислений. Никаких сайд-эффектов.
- отделяют описание параллелизма от логики самой программы (модульность - здорово!). Делаем ленивую структуру, которая представляет собой наши вычисления, а потом пишем под нее стратегию, которая описывает, как обходить эту структуру и делать вычисления последовательно или параллельно.
- композиция! Берем маленькие стратегии, из них делаем большую.
- есть инстансы ~Monad~ и ~Applicative~ для удобства тривиальных случаев
Примеры:
- ~r0~: ничего не делай.
- ~rseq~: вычислить до WHNF.
- ~rdeepseq~: вычисли меня полностью. ~%op = evalSeq Control.Seq.%op~.
- ~rpar~: сделаем спарк для параллельного вычисления.
- ~rparWith~: композиция. Не покидает монаду ~Eval~, не имеет встроенного ~rseq~. 
*** Как в Haskell обстоят дела с *DeadLock*'ами?
Когда рантайм GHC находит группу тредов, которые все заблочены на блокирующих мутабельных переменных (~MVar~ или переменные ~STM~), и видит, что другие треды на них не ссылаются, он решает, что все треды в дедлоке и отсылает им асинхронные исключения ~BlockedIndefinitelyOnMVar/STM~. Кстати, ловить асинхронные исключения моветон.
*** Что такое *RTS*?
RunTime System. 50k строк сишного кода, хайлайты:
- содержит всякий вспомогательный код, который позволяет бросить эксепшн после ~error~, аллоцировать ~Array#~, организовать работу с ~MVar~.
- включает в себя менеджер памяти плюс сборщик мусора.
- содержит userspace-шедулер для хаскель-тредов, с поддержкой шедулинга их на несколько процессоров, и позволяет хаскель-тредам вызывать внешние функции в разных тредах ОС.
- содержит интерпретатор байткода для GHCi и динамический линковщик туда же.
- может в разный профайлинг и покрытие кода.
- поддержка STM.
*** Укажите несколько полезных опций *RTS*
-Asize/-Hsize/-Msize, -threaded, -Nn, -prof
*** Опишите, что такое ~MVar~, зачем он может быть нужен и несколько функций по работе с этим объектом.
~MVar T~ - Мутабельная переменная, которая либо пуста, либо содержит значение типа t. Можно использовать как синхронизированную мутабельную переменную, как канал или как семафор. Функции: ~takeMVar~, ~putMVar~, read/swap/with/modifyMVar
*** Что делает ~forkIO~? Чем он отличается от ~forkFinally~?
~forkIO~ создает новый легковесный тред, где запустится IO, переданное в качестве аргумента, и возвращает его айдишник. Почему-то игнорирует исключения про дедлоки и убийство треда и пробрасывает остальные исключения как обычно.
~forkFinally~ форкает тред и, когда тот должен умереть, вызывает функцию, переданную аргументом, на эксепшне или возвращаемом значении. Своего рода хэндлер чего-то.
** Question 13: forall
*** DONE Напишите, как иметь список объектов разных функторов, внутри каждого из которых значения одинакового типа, чтобы иметь возможность применить функции из этого значения в другое?
#+BEGIN_SRC haskell
data FunctorBox a = forall f . Functor f => FB (f a)
FB :: forall {a} {f :: * -> *} . Functor f => f a -> FunctorBox a -- as ghci sees it

fmapFB :: forall t a . (t -> a) -> FunctorBox t -> FunctorBox a
fmapFB f = \(FB a) -> FB (f <$> a)
#+END_SRC
*** DONE Зачем нужно расширение ~ExistentialQuantification~?
Для того, чтобы работать со значениями разных типов, но обладающими каким-то свойством (например, они одного класса), одинаково. Например, чтобы иметь возможность складывать такие значения в лист, получая тем самым гетерогенный лист, спрятав значения в некоторую "коробку" (/type hider/)
*** DONE Зачем нужно расширение языка ~-XExplicitForall~?
Чтобы явно аннотировать типы с использованием ~forall~
*** DONE В чем разница между ~-XRank2Types~ и ~-XRankNTypes~? Зачем нужны оба?
~-XRank2Types~ разрешает полиморфные типы ранга 2, ~-XRankNTypes~ разрешает полиморфные типы любого ранга. 
В системах с полиморфными типами ранга 2 задача вывода типов разрешима, если же ранг > 2, то задача становится неразрешимо и возникает необходимость явной аннотации типов. С этим и связана необходимость разделения этих расширений языка.
*** DONE Зачем нужно расширение языка ~-XScopedTypeVariables~ и как оно взаимодействует с ~forall~?
Позволяет указывать, что переменные типа из сигнатуры распространяются на тело функции. Чтобы это работало, надо использовать ~forall~ в сигнатуре:
#+BEGIN_SRC haskell
  {-# LANGUAGE ScopedTypeVariables #-}
  import Data.List

  main = putStrLn "No errors."

  -- show
  myFunction :: forall a. Ord a => [a] -> [(a, a)]
  myFunction inputList = zip sortedList nubbedList
      where sortedList :: [a]
            sortedList = sort inputList
            nubbedList :: [a]
            nubbedList = nub inputList
  -- /show
#+END_SRC
** Question 14: Advanced types
*** DONE Что такое *typed holes* и зачем они нужны?
С их помощью можно спросить у компилятора, какого типа должно быть твое что-то.
#+BEGIN_SRC haskell
  mfold :: [Maybe a] -> [Either a b]
  mfold = foldr _f _z

  > Found hole ‘_f’ with type: Maybe a -> [Either a b] -> [Either a b]
  > Found hole ‘_z’ with type: [Either a b]
#+END_SRC
*** DONE Зачем нужно расширение языка ~-XTypeApplications~?
Позволяет задавать явные аргументы типов полиморфной функции, например ~map @Int @Bool isEven xs~. Решает проблему show/read, потому что мы явно задаем типы и все тайпчекается.
#+BEGIN_SRC haskell
  answer_read = show (read @Int "3") -- "3" :: String
  answer_show = show @Integer (read "5") -- "5" :: String
  answer_showread = show @Int (read @Int "7") -- "7" :: String
#+END_SRC
*** DONE Зачем нужно расширение языка ~-XPartialSignatures~?
Аналог typed holes для сигнатур функций:
#+BEGIN_SRC haskell
  arbitCs :: _ => a -> String
  arbitCs x = show (succ x) ++ show (x == x)
  Main.hs:6:12: warning: [-Wpartial-type-signatures]
      Found constraint wildcard ‘_’ standing for ‘(Show a, Eq a, Enum a)’
      In the type signature:
        arbitCs :: _ => a -> String
#+END_SRC
*** TODO Можно ли создать следующий тип данных в Haskell: ~data a : > b = (a -> b) : > (b -> a)~?
*** DONE Что такое *Functional Dependencies*? Назовите какой-нибудь известный вам type class, в котором присутствуют функциональные зависимости.
Функциональные зависимости используются для ограничения параметров тайпклассов. Они позволяют объявить, что в тайпклассе с несколькими параметрами один из параметров можно *однозначно!* определить по другим.
#+BEGIN_SRC haskell
class Mult a b c | a b -> c where
  (*) :: a -> b -> c
#+END_SRC
Классический (и единственный) пример использования - перемножение матриц/векторов/скаляров, тайпкласс указан выше.
** Question 15: Comonads
*** Напишите пример использования *комонад* 
*** Напишите, какие комонады двойственны монадам ~Reader, Writer, State~
*** Напишите, какие комонады двойственны монадам ~Traced, Store, Env~
*** Напишите комонаду ~Stream~ и инстанс ~Comonad~ для нее.
*** Напишите комонаду ~Env~ и инстанс ~Comonad~ для нее.
*** Напишите комонаду ~Store~ и инстанс ~Comonad~ для нее.
*** Напишите комонаду ~Traced~ и инстанс ~Comonad~ для нее.
*** Реализуйте ~instance Comonad~ для обычного ~Zipper~
*** ~IO~ использует абстракцию монад, какой аналог есть в мире комонад?
*** Напишите класс ~ComonadTrans~
*** Как можно было бы сделать ~codo~ нотацию для комонад? И что бы происходило в этом синтаксическом сахаре?
** Question 16: Idris
*** Реализуйте функцию ~take~ для вектора на Idris
*** Реализуйте функцию ~filter~ для вектора на Idris
*** Реализуйте функцию ~head~ для списка на Idris, которая компилируется только с гарантированно непустыми списками.
*** Напишите тип "*зависимая пара*" на Idris
*** Что такое ~[| |]~-идиома в Idris?
*** Что такое ~!~-идиома в Idris?
*** Что такое ~_|_-eliminator~? Зачем это надо?
*** Что такое "*тотальность*" и какие преимущества она дает? 
